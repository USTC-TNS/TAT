name: build

on: [push, pull_request]

jobs:
  basic_test:
    name: basic test except svd and qr
    runs-on: ubuntu-latest
    if: "! contains(toJSON(github.event.commits.*.message), '[skip ci]')"

    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: install mpi and openblas
      run: sudo apt-get install -y mpi-default-dev libopenblas-serial-dev
    - name: make build directory
      run: mkdir ${{runner.workspace}}/build
    - name: configure
      working-directory: ${{runner.workspace}}/build
      run: cmake ${{github.workspace}}
    - name: ctest
      working-directory: ${{runner.workspace}}/build
      run: ctest -E ^test_\(svd\|qr\)$

  build_wheels_trigger:
    name: trigger for building wheels
    runs-on: ubuntu-latest
    needs: basic_test
    if: "github.event_name == 'push' && (startsWith(github.ref, 'refs/tags') || contains(toJSON(github.event.commits.*.message), '[force build]'))"
    steps:
      - name: nothing
        run: echo this is an empty job

  build_pytat_wheels:
    name: build PyTAT wheels
    runs-on: ${{ matrix.os }}
    needs: build_wheels_trigger

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python: 37
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
            cpu_number: 2
          - os: ubuntu-latest
            python: 38
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
            cpu_number: 2
          - os: ubuntu-latest
            python: 39
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
            cpu_number: 2
          - os: ubuntu-latest
            python: 310
            bitness: 64
            platform_id: manylinux_x86_64
            manylinux_image: manylinux2014
            cpu_number: 2

          - os: macos-latest
            python: 39
            bitness: 64
            platform_id: macosx_x86_64
            mac_arch: x86_64
            cpu_number: 3
          - os: macos-latest
            python: 310
            bitness: 64
            platform_id: macosx_x86_64
            mac_arch: x86_64
            cpu_number: 3

          - os: macos-latest
            python: 39
            bitness: 64
            platform_id: macosx_arm64
            mac_arch: arm64
            cpu_number: 3
          - os: macos-latest
            python: 310
            bitness: 64
            platform_id: macosx_arm64
            mac_arch: arm64
            cpu_number: 3

          - os: windows-latest
            python: 37
            bitness: 64
            platform_id: win_amd64
            cpu_number: 2
          - os: windows-latest
            python: 38
            bitness: 64
            platform_id: win_amd64
            cpu_number: 2
          - os: windows-latest
            python: 39
            bitness: 64
            platform_id: win_amd64
            cpu_number: 2
          - os: windows-latest
            python: 310
            bitness: 64
            platform_id: win_amd64
            cpu_number: 2

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: generate PyTAT code
        working-directory: ${{github.workspace}}/PyTAT
        run: bash ./generator.sh
      - name: copy PyTAT setup.py
        working-directory: ${{github.workspace}}
        run: cp setup/PyTAT.py setup.py
      - name: get pybind11
        uses: actions/checkout@v2
        with:
          repository: pybind/pybind11
          path: pybind11
      - name: setup python
        uses: actions/setup-python@v2
      - name: install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: build wheel
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}

          CIBW_BEFORE_ALL_LINUX: yum install -y lapack-devel
          CIBW_BEFORE_ALL_WINDOWS: cmd /c python .github\scripts\get_openblas_for_windows.py && choco install -y ninja
          CIBW_BEFORE_ALL_MACOS: ""

          CIBW_ENVIRONMENT_LINUX: MAKEFLAGS=--parallel=${{ matrix.cpu_number }}
          CIBW_ENVIRONMENT_WINDOWS: MAKEFLAGS=--parallel=${{ matrix.cpu_number }} CMAKEFLAGS="-GNinja|-DCMAKE_CXX_COMPILER=clang++|-DTAT_MATH_LIBRARIES=../../../lib/libopenblas"
          CIBW_ENVIRONMENT_MACOS: MAKEFLAGS=--parallel=${{ matrix.cpu_number }} CMAKEFLAGS=-DCMAKE_CXX_FLAGS=--target=${{ matrix.mac_arch }}-apple-darwin MACOSX_DEPLOYMENT_TARGET=10.14

          CIBW_REPAIR_WHEEL_COMMAND_LINUX: ""
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ""
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""

          CIBW_BUILD_VERBOSITY: 1
        run: python -m cibuildwheel --output-dir wheelhouse
      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

  build_lazy_tetragono_wheels:
    name: build lazy_graph and tetragono wheels
    runs-on: ubuntu-latest
    needs: build_wheels_trigger

    strategy:
      fail-fast: false
      matrix:
        include:
          - package: lazy_graph
          - package: tetragono

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: setup python
        uses: actions/setup-python@v2
      - name: install wheel
        run: python -m pip install wheel
      - name: build wheel
        working-directory: ${{github.workspace}}
        run: python setup/${{ matrix.package }}.py bdist_wheel
      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          path: ${{github.workspace}}/dist/*.whl

  upload_pypi:
    name: upload wheels to pypi
    runs-on: ubuntu-latest
    needs: [build_wheels_trigger, build_pytat_wheels, build_lazy_tetragono_wheels]
    if: startsWith(github.ref, 'refs/tags')

    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist
      - name: setup python
        uses: actions/setup-python@v2
      - name: upload
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  create_release:
    name: create github release
    runs-on: ubuntu-latest
    needs: [build_wheels_trigger, build_pytat_wheels, build_lazy_tetragono_wheels]
    if: startsWith(github.ref, 'refs/tags')

    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist
      - name: release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
