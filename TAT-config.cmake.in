cmake_minimum_required(VERSION 3.8)

add_library(TAT INTERFACE)
target_include_directories(TAT INTERFACE @TAT_INCLUDE_PATH@)

# std=c++17
target_compile_features(TAT INTERFACE cxx_std_17)

# These macros used for record compiling information
target_compile_definitions(TAT INTERFACE TAT_BUILD_TYPE="$<IF:$<STREQUAL:${CMAKE_BUILD_TYPE},>,Default,${CMAKE_BUILD_TYPE}>")
target_compile_definitions(TAT INTERFACE TAT_COMPILER_INFORMATION="${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} on ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION}")

# msvc need utf-8 and __cplusplus macro
target_compile_options(TAT INTERFACE "$<$<CXX_COMPILER_ID:MSVC>:/utf-8>")
target_compile_options(TAT INTERFACE "$<$<CXX_COMPILER_ID:MSVC>:/Zc:__cplusplus>")

# try to enable mpi
option(TAT_USE_MPI "Use mpi for TAT" ON)
get_filename_component(CXX_COMPILER_NAME ${CMAKE_CXX_COMPILER} NAME)
if(CXX_COMPILER_NAME MATCHES "mpi")
  message(STATUS "Using mpi compiler directly")
  target_compile_definitions(TAT INTERFACE TAT_USE_MPI)
  if(NOT TAT_USE_MPI)
    message(STATUS "Ignore TAT_USE_MPI=OFF")
  endif()
else()
  if(TAT_USE_MPI)
    find_package(MPI QUIET)
    if(MPI_FOUND)
      target_include_directories(TAT INTERFACE ${MPI_INCLUDE_PATH})
      target_link_libraries(TAT INTERFACE ${MPI_LIBRARIES})
      message(STATUS "Using mpi by linking mpi libraries")
      target_compile_definitions(TAT INTERFACE TAT_USE_MPI)
    else()
      message(STATUS "No mpi support since mpi not found")
    endif()
  else()
    message(STATUS "Disable mpi support since TAT_USE_MPI=OFF")
  endif()
endif()

# link lapack and blas
if(DEFINED TAT_MATH_LIBRARIES)
  message(STATUS "Use customed math libraries")
  target_link_libraries(TAT INTERFACE ${TAT_MATH_LIBRARIES})
else()
  if(EMSCRIPTEN)
    message(STATUS "Use emscripten blas and lapack")
    target_link_libraries(TAT INTERFACE ${CMAKE_SOURCE_DIR}/emscripten/liblapack.a)
    target_link_libraries(TAT INTERFACE ${CMAKE_SOURCE_DIR}/emscripten/libblas.a)
    target_link_libraries(TAT INTERFACE ${CMAKE_SOURCE_DIR}/emscripten/libf2c.a)
  else()
    find_package(BLAS REQUIRED)
    find_package(LAPACK REQUIRED)
    target_link_libraries(TAT INTERFACE ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES})
  endif()
endif()
