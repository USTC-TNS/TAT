#+OPTIONS: toc:nil
#+LATEX_CLASS: koma-book
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \usepackage{fvextra}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage[most]{tcolorbox}
#+LATEX_HEADER: \usepackage{etoolbox}
#+LATEX_HEADER: \BeforeBeginEnvironment{Verbatim}{\begin{tcolorbox}[breakable,enhanced]}
#+LATEX_HEADER: \AfterEndEnvironment{Verbatim}{\end{tcolorbox}}
#+LATEX_HEADER: \usemintedstyle{emacs}
#+begin_src emacs-lisp :exports none :results silent
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (defun ek/babel-ansi ()
    (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
      (save-excursion
        (goto-char beg)
        (when (looking-at org-babel-result-regexp)
          (let ((end (org-babel-result-end))
                (ansi-color-context-region nil))
            (ansi-color-apply-on-region beg end))))))
  (add-hook 'org-babel-after-execute-hook 'ek/babel-ansi)
  (setq org-babel-min-lines-for-block-output 1)

  (defun my-latex-export-src-blocks (text backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (with-temp-buffer
        (insert text)
        ;; replace verbatim env by minted
        (goto-char (point-min))
        (replace-string "\\begin{verbatim}" "\\begin{minted}{python}")
        (replace-string "\\end{verbatim}" "\\end{minted}")
        (buffer-substring-no-properties (point-min) (point-max)))))
  (setq org-export-filter-src-block-functions '(my-latex-export-src-blocks))

  (defun my-latex-export-example-blocks (text backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (with-temp-buffer
        (insert text)
        ;; replace verbatim env by Verbatim
        (goto-char (point-min))
        (replace-string "\\begin{verbatim}" "\\begin{Verbatim}[breaklines=true, breakanywhere=true]")
        (replace-string "\\end{verbatim}" "\\end{Verbatim}")
        (buffer-substring-no-properties (point-min) (point-max)))))
  (setq org-export-filter-example-block-functions '(my-latex-export-example-blocks))

  (add-to-list 'org-latex-classes
               '("koma-book" "\\documentclass{scrbook}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

#+begin_export latex
\iffalse
#+end_export

* [[https://github.com/USTC-TNS/TNSP][TNSP]] Â· [[https://github.com/USTC-TNS/TNSP/releases/latest][https://img.shields.io/github/v/release/USTC-TNS/TNSP.svg?style=flat-square]] [[https://github.com/USTC-TNS/TNSP/tree/main/LICENSE.rst][https://img.shields.io/github/license/USTC-TNS/TNSP.svg?style=flat-square]] [[https://github.com/USTC-TNS/TNSP/actions/workflows/build.yml][https://img.shields.io/github/actions/workflow/status/USTC-TNS/TNSP/build.yml.svg?style=flat-square]]

#+LATEX_HEADER: \usepackage{authblk}
#+begin_export latex
\fi
\title{The manual of the TNSP framework}
\author[1]{Hao Zhang}
\author[2]{Shaojun Dong\footnote{\textit{E-mail address:} sj.dong@iai.ustc.edu.cn}}
\author[2]{Chao Wang}
\author[2]{Meng Zhang}
\author[1,2,3]{Lixin He\footnote{\textit{E-mail address:} helx@ustc.edu.cn}}
\affil[1]{CAS Key Laboratory of Quantum Information, University of Science and Technology of China, Hefei 230026, People's Republic of China}
\affil[2]{Institute of Artificial Intelligence, Hefei Comprehensive National Science Center, Hefei, 230088, People's Republic of China}
\affil[3]{Hefei National Laboratory, University of Science and Technology of China, Hefei, 230088, People's Republic of China}
\renewcommand\Authfont{\small}
\renewcommand\Affilfont{\itshape\small}
\maketitle
\tableofcontents
\chapter{Overview}
\section{About the project}
#+end_export

The [[https://github.com/USTC-TNS/TNSP][TNSP(tensor network state packages) framework]] is developed by
CAS Key Laboratory of Quantum Information, University of Science and Technology of China,
and Institute of Artificial Intelligence, Hefei Comprehensive National Science Center,
to streamline the development of tensor network state(TNS) methods,
by abstracting the details of tensor types, whether they are [[https://journals.aps.org/pra/abstract/10.1103/PhysRevA.82.050301][symmetry tensors]], [[https://journals.aps.org/prb/abstract/10.1103/PhysRevB.99.195153][fermion tensors]], or conventional tensors.
It offers a user-centric interface that facilitates the application of popular TNS approaches,
particularly for the projected entangled pair states(PEPS),
including the simple update, and gradient optimization, and various sampling techniques.
The design of the framework is inherently flexible,
allowing users to seamlessly integrate custom physics physical models and optimization strategies via Python3 plugins.

The framework comprises various packages:
+ [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/][=TAT=]] : the core tensor package to provide a unified interface for various types of tensor such as Abelian [[https://journals.aps.org/pra/abstract/10.1103/PhysRevA.82.050301][symmetry tensors]] and [[https://journals.aps.org/prb/abstract/10.1103/PhysRevB.99.195153][fermion tensors]], written in C++, and providing a [[https://github.com/USTC-TNS/TNSP/tree/main/PyTAT/][Python interface]].
+ [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/][=tetragono=]] : a tensor network state package offering a user-friendly unified interface for various TNS methods across different physics models and tensor types.
+ [[https://github.com/USTC-TNS/TNSP/tree/main/tetraku/][=tetraku=]] : a collection including physical models and algorithm customization for tetragono.
+ [[https://github.com/USTC-TNS/TNSP/tree/main/lazy_graph/][=lazy_graph=]] : an auxiliary package to facilitate lazy evaluation mechanisms in tetragono.
+ [[https://github.com/USTC-TNS/TNSP/tree/main/PyScalapack/][=PyScalapack=]] : an auxiliary package to offer a Python interface for ScaLAPACK within tetragono.
+ [[https://github.com/USTC-TNS/TNSP/tree/main/tnsp_bridge/][=tnsp_bridge=]] : an auxiliary package to enable format conversion with [[https://doi.org/10.1016/j.cpc.2018.03.006][older TNSP versions]].
For detailed package installation and usage, please refer to the respective subdirectories or chapters.
If you are reading this manual in PDF version, some links to directories or files may be broken. For a better experience, refer to this manual in the GitHub repository.

* Contributing

#+begin_export latex
\iffalse
#+end_export

Contributions are welcome and see [[https://github.com/USTC-TNS/TNSP/tree/main/CONTRIBUTING.org][=CONTRIBUTING.org=]] for details.

#+begin_export latex
\fi
\input{contributing.tex}
#+end_export

* License

Distributed under the GPLv3 License. See [[https://github.com/USTC-TNS/TNSP/tree/main/LICENSE.rst][=LICENSE.rst=]] for more information.

#+begin_export latex
\chapter{TAT}\label{chap:TAT}
\input{TAT.tex}

\chapter{PyTAT}\label{chap:PyTAT}
\input{PyTAT.tex}

\chapter{tetragono}\label{chap:tetragono}
\input{tetragono.tex}

\chapter{tetraku}\label{chap:tetraku}
\input{tetraku.tex}

\chapter{lazy\_graph}\label{chap:lazy_graph}
\input{lazy_graph.tex}

\chapter{PyScalapack}\label{chap:PyScalapack}
\input{PyScalapack.tex}

\chapter{tnsp\_bridge}\label{chap:tnsp_bridge}
\input{tnsp_bridge.tex}
#+end_export
