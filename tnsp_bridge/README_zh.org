#+TITLE: TNSP-bridge
#+OPTIONS: toc:nil
#+LATEX_CLASS: koma-book
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \usepackage{fvextra}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage[most]{tcolorbox}
#+LATEX_HEADER: \usepackage{etoolbox}
#+LATEX_HEADER: \BeforeBeginEnvironment{Verbatim}{\begin{tcolorbox}[breakable,enhanced]}
#+LATEX_HEADER: \AfterEndEnvironment{Verbatim}{\end{tcolorbox}}
#+LATEX_HEADER: \usemintedstyle{emacs}
#+begin_src emacs-lisp :exports none :results silent
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (defun ek/babel-ansi ()
    (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
      (save-excursion
        (goto-char beg)
        (when (looking-at org-babel-result-regexp)
          (let ((end (org-babel-result-end))
                (ansi-color-context-region nil))
            (ansi-color-apply-on-region beg end))))))
  (add-hook 'org-babel-after-execute-hook 'ek/babel-ansi)
  (setq org-babel-min-lines-for-block-output 1)

  (defun my-latex-export-src-blocks (text backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (with-temp-buffer
        (insert text)
        ;; replace verbatim env by minted
        (goto-char (point-min))
        (replace-string "\\begin{verbatim}" "\\begin{minted}{python}")
        (replace-string "\\end{verbatim}" "\\end{minted}")
        (buffer-substring-no-properties (point-min) (point-max)))))
  (setq org-export-filter-src-block-functions '(my-latex-export-src-blocks))

  (defun my-latex-export-example-blocks (text backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (with-temp-buffer
        (insert text)
        ;; replace verbatim env by Verbatim
        (goto-char (point-min))
        (replace-string "\\begin{verbatim}" "\\begin{Verbatim}[breaklines=true, breakanywhere=true]")
        (replace-string "\\end{verbatim}" "\\end{Verbatim}")
        (buffer-substring-no-properties (point-min) (point-max)))))
  (setq org-export-filter-example-block-functions '(my-latex-export-example-blocks))

  (add-to-list 'org-latex-classes
               '("koma-book" "\\documentclass{scrbook}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

TNSP-bridge 是一个工具库, 用于将张量数据从旧版 [[https://www.sciencedirect.com/science/article/pii/S001046551830078X][TNSP]] 格式转换为 [[https://github.com/USTC-TNS/TNSP/tree/main/PyTAT][TAT]] 格式.
需要注意的是, 不同版本的 旧TNSP 可能在数据结构上有所不同,
而这个子项目专用于与 第4版的旧TNSP.
我们支持转换非对称性张量和玻色子/费米子 $Z(2)$ / $U(1)$ 对称性张量的各种标量类型.

* 安装

请将目录复制或创建软链接到 =site-packages= 目录中.
或者, 用户可以通过运行命令 =pip install tnsp_bridge= 使用 pip 安装 TNSP-bridge 包.

* 文档

唯一的功能是 =bridge=, 它接受一个函数, 该函数逐行提取旧版本的张量数据, 并返回新版本的张量.
例如, 以下是旧版本的数据:

#+NAME: example-data
#+begin_example
   T T T T
   readable_data T
             2           8           3           0
             1           4           8
             3           7           8
     1.00000000       2.00000000       3.00000000      -1.00000000      -2.00000000      -3.00000000      -4.00000000       0.00000000
   End_data
   readable_data T
             1           8           3           0
             1           4           8
             3           7           8
             3           2           1           1           2           2           1           1
   End_data
   readable_data T
             1           6           2           0
             1           4
             3           6
             3           4           1          -1          -1           1
   End_data
   A1_1.D  A1_1.R  A1_1.n
   readable_data T
             3           9          12           0
             1       22049           0           0           4   538976288   538976288   538976288           8   538976288   538976288   538976288
             3           0           0           0           7           0           0           0           9           0           0           0
   0.23446911431164341       0.13002435022579403       -3.1842370052190448E-002  0.45356268067516309       -1.4087785231172337E-002  -9.0396315774136524E-002  -2.0732171027595565E-002 -0.35235299284206140       -1.2456779139446277E-002
   End_data
  EOF
#+end_example

下面的代码, 将存储在名为 =example_data= 的字符串变量中的上述数据, 转换为新版本格式:

#+begin_src python :results output :exports both :cache yes :var example_data=example-data
  from bridge import bridge

  data_line_by_line = example_data.split("\n")
  data_line_by_line.reverse()
  print(bridge(data_line_by_line.pop, compat=True, parity=False))
#+end_src

#+RESULTS[c30c225ca4ab1df1646c7c096e177c41051f4627]:
#+begin_example
{names:[A1_1.n,A1_1.R,A1_1.D],edges:[{arrow:0,segment:{0:1}},{arrow:1,segment:{-1:1,-2:2,-3:2,-4:1}},{arrow:1,segment:{1:3,2:2,3:1}}],blocks:{[0,-1,1]:[0.234469,0.130024,-0.0318424],[0,-2,2]:[0.453563,-0.0140878,-0.0903963,-0.0207322],[0,-3,3]:[-0.352353,-0.0124568]}}
#+end_example

函数 =bridge= 有两个可选参数.
第一个是 =parity=, 用于区分对称性张量的对称群.
当 =parity= 设置为 =False= (默认)时, 它应该是一个费米子或玻色子的 $U(1)$ 对称性张量.
如果设置为 =True=, 则考虑一个费米子或玻色子的 $Z(1)$ 对称性张量.
第二个参数是 =compat=, 它区分旧 TNSP 中的版本.
在旧 TNSP 中, 有两种数据格式:当 =compat= 设置为 =True= 时处理较旧的格式, 设置为 =False= (默认)时处理较新的格式.
