#+TITLE: CONTRIBUTING
#+OPTIONS: toc:nil
#+LATEX_CLASS: koma-book
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \usepackage{fvextra}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage[most]{tcolorbox}
#+LATEX_HEADER: \usepackage{etoolbox}
#+LATEX_HEADER: \BeforeBeginEnvironment{Verbatim}{\begin{tcolorbox}[breakable,enhanced]}
#+LATEX_HEADER: \AfterEndEnvironment{Verbatim}{\end{tcolorbox}}
#+LATEX_HEADER: \usemintedstyle{emacs}
#+begin_src emacs-lisp :exports none :results silent
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (defun ek/babel-ansi ()
    (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
      (save-excursion
        (goto-char beg)
        (when (looking-at org-babel-result-regexp)
          (let ((end (org-babel-result-end))
                (ansi-color-context-region nil))
            (ansi-color-apply-on-region beg end))))))
  (add-hook 'org-babel-after-execute-hook 'ek/babel-ansi)
  (setq org-babel-min-lines-for-block-output 1)

  (defun my-latex-export-src-blocks (text backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (with-temp-buffer
        (insert text)
        ;; replace verbatim env by minted
        (goto-char (point-min))
        (replace-string "\\begin{verbatim}" "\\begin{minted}{python}")
        (replace-string "\\end{verbatim}" "\\end{minted}")
        (buffer-substring-no-properties (point-min) (point-max)))))
  (setq org-export-filter-src-block-functions '(my-latex-export-src-blocks))

  (defun my-latex-export-example-blocks (text backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (with-temp-buffer
        (insert text)
        ;; replace verbatim env by Verbatim
        (goto-char (point-min))
        (replace-string "\\begin{verbatim}" "\\begin{Verbatim}[breaklines=true, breakanywhere=true]")
        (replace-string "\\end{verbatim}" "\\end{Verbatim}")
        (buffer-substring-no-properties (point-min) (point-max)))))
  (setq org-export-filter-example-block-functions '(my-latex-export-example-blocks))

  (add-to-list 'org-latex-classes
               '("koma-book" "\\documentclass{scrbook}"
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

** How to contribute to TNSP project

If you have/implemented an idea or find/fixed a bug, use GitHub issues or pull requests.
Providing a minimum working example for bugs would be helpful.
Any questions about using TNSP can be put in GitHub discussion.
And feel free to submit a pull request for completing documentation or adding descriptions of new models into =tetraku=.

** Code structure

The code structure of TNSP is organized into subprojects, with each subproject placed in its respective directory. The TNSP framework includes:
+ [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/][=TAT=]] contains the core tensor library written in C++17, known as =TAT=.
+ [[https://github.com/USTC-TNS/TNSP/tree/main/PyTAT/][=PyTAT=]] contains a wrapper over =TAT= using pybind11, known as =PyTAT= or the Python interface for =TAT=.
+ [[https://github.com/USTC-TNS/TNSP/tree/main/lazy_graph/][=lazy_graph=]] contains a utility library for lazy evaluation, known as =lazy_graph= , utilized in =tetragono=.
+ [[https://github.com/USTC-TNS/TNSP/tree/main/PyScalapack/][=PyScalapack=]] contains a utility library for directly calling ScaLAPACK in python, known as =PyScalapack= , utilized in =tetragono=.
+ [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/][=tetragono=]] contains a library =tetragono= , which provides high-level tensor network state operations, including exact diagonalization, simple update and sampling methods on PEPS.
+ [[https://github.com/USTC-TNS/TNSP/tree/main/tetraku/][=tetraku=]] contains a library =tetraku= , which provides some physics models that can be used with =tetragono= .
+ [[https://github.com/USTC-TNS/TNSP/tree/main/tnsp_bridge/][=tnsp_bridge=]] contains a library =tnsp_bridge= , which is used to migrate tensors in the old TNSP format to the =PyTAT= format.
whereas =lazy_graph=, =PyScalapack=, and =tnsp_bridge= are all single-file, pure Python packages.
The directory structure of other subprojects is presented below.

*** =tetraku=

The =tetraku= contains physics model information in their respective directories.
Every model contains a function =abstract_state= to define its physics edge and Hamiltonian, and =abstract_lattice= to define its virtual edges.
When adding a new physics model to =tetraku=, please include a short README, even a single line containing its Hamiltonian is acceptable.
Please note that for models you want to optimize within a subspace of the Hamiltonian, typically a Hamiltonian hopping script, configuration initializer script, or even a subspace restrictor is needed.
And most of the time, you may also want to add some measurements for the model.
The scripts for these models can be referenced if you want to add new models: [[https://github.com/USTC-TNS/TNSP/tree/main/tetraku/tetraku/models/J1J2/][=J1J2=]], [[https://github.com/USTC-TNS/TNSP/tree/main/tetraku/tetraku/models/rydberg/][=rydberg=]] and [[https://github.com/USTC-TNS/TNSP/tree/main/tetraku/tetraku/models/free_fermion/][=free_fermion=]].

*** =tetragono=

The =tetragono= first defines AbstractState in [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/abstract_state.py][=abstract_state.py=]], which includes customized Hamiltonian and physical edges on a virtual square lattice, accommodating multiple orbits on a single site.
Subsequently, [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/abstract_lattice.py][=abstract_lattice.py=]] defines AbstractLattice.
This component details the virtual edges within the tensor network on the square lattice, known as the projected entangled pair states (PEPS).
For non-symmetry tensors, users only need to provide the dimension as edge information, while non-fermion symmetric tensors need complete segment information, and fermion symmetry tensors require an additional fermi-arrow.
Following these definitions, exact diagonalization is realized in [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/exact_state.py][=exact_state.py=]] ,and [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/simple_update_lattice.py][=simple_update_lattice.py=]] implements a simple update algorithm.

Since there are various sampling methods, the related functions are categorized under the [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/sampling_lattice/][=sampling_lattice=]] subdirectory.
Within this directory, [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/sampling_lattice/lattice.py][=lattice.py=]] specifies the lattice type for containing data and configuration type for individual sampling results,
while [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/sampling_lattice/sampling.py][=sampling.py=]] encompasses several methods such as ergodic, sweep, and direct sampling.
The [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/sampling_lattice/observer.py][=observer.py=]] is designed to facilitate measurements and calculate gradients from sampling results.
Finally, all these functionalities are integrated and executed through the driver functions outlined in [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/sampling_lattice/gradient.py][=gradient.py=]].

The [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/utility.py][=utility.py=]] file comprises various utility functions.
The [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/auxiliaries][=auxiliaries=]] directory, utilizing =lazy_graph=, used in the configuration type, contains several auxiliary systems designed to minimize redundant calculations in tensor network contractions,
particularly when several sites are removed or replaced.
The [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/tensor_element.py][=tensor_element.py=]] script is dedicated to sparsifying the Hamiltonian, a critical component in sampling methods.
In [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/conversion.py][=conversion.py=]], functions are defined for converting between ExactState, SimpleUpdateLattice, and SamplingLattice.
Finally, [[https://github.com/USTC-TNS/TNSP/tree/main/tetragono/tetragono/shell.py][=shell.py=]] offers a high-level, user-friendly interface for accessing all functions within =tetragono=.

*** =PyTAT=

The =PyTAT= serves as a wrapper for =TAT=, utilizing pybind11. It comprises three files:
+ [[https://github.com/USTC-TNS/TNSP/tree/main/PyTAT/PyTAT.hpp][=PyTAT.hpp=]] defines template functions that wrap tensors and edges.
+ [[https://github.com/USTC-TNS/TNSP/tree/main/PyTAT/dealing_tensor.cpp.in][=dealing_tensor.cpp.in=]], is employed to generate files that instantiate function in [[https://github.com/USTC-TNS/TNSP/tree/main/PyTAT/PyTAT.hpp][=PyTAT.hpp=]] for different tensor types, orchestrated by [[https://github.com/USTC-TNS/TNSP/tree/main/PyTAT/CMakeLists.txt][=CMakeLists.txt=]].
+ [[https://github.com/USTC-TNS/TNSP/tree/main/PyTAT/PyTAT.cpp][=PyTAT.cpp=]] is responsible for defining all remaining components within the Python module.

*** =TAT=

Within the directory [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/include/TAT/structure/][=structure=]], the organization of files is as follows:

- [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/include/TAT/structure/name.hpp][=name.hpp=]] is responsible for defining names used to label tensor edges, referred to as edge names.
- [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/include/TAT/structure/symmetry.hpp][=symmetry.hpp=]] outlines the generic symmetry type =Symmetry=. This can be instantiated as various symmetries such as =NoSymmetry=, =BoseU1Symmetry=, =BoseZ2Symmetry=, =FermiZ2Symmetry=, =FermiU1Symmetry=, among others.
- [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/include/TAT/structure/edge.hpp][=edge.hpp=]] details the structure of a tensor edge, which includes segments and a fermi-arrow. Here, segments are represented as a vector comprising pairs of Symmetry and dimension.
- [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/include/TAT/structure/core.hpp][=core.hpp=]] is designed to define everything in a tensor except for the edge names.
- [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/include/TAT/structure/tensor.hpp][=tensor.hpp=]] describes the tensor structure, encompassing a =shared_ptr<Core>= and a =vector<Name>=. Additionally, this file declares numerous tensor-related functions, the implementations of which are found in the corresponding files within the [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/include/TAT/implement/][=implement=]] directory.

Furthermore, several utilities are defined in the [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/include/TAT/utility/][=utility=]] directory.
The file [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/include/TAT/miscellaneous/io.hpp][=io.hpp=]] is dedicated to defining I/O functions for tensors,
[[https://github.com/USTC-TNS/TNSP/tree/main/TAT/include/TAT/miscellaneous/scalar.hpp][=scalar.hpp=]] handles scalar arithmetic for tensors, and [[https://github.com/USTC-TNS/TNSP/tree/main/TAT/include/TAT/miscellaneous/mpi.hpp][=mpi.hpp=]] focuses on various MPI functions for tensors. It is important to note that in PyTAT, functions from mpi.hpp are not utilized.

#+begin_export latex
\iffalse
#+end_export

-----

Thanks! :heart: :heart: :heart:

USTC-TNS Group

#+begin_export latex
\fi
#+end_export
